/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface INameWrapperInterface extends utils.Interface {
  functions: {
    "getData(uint256)": FunctionFragment;
    "ins()": FunctionFragment;
    "setSubnodeOwner(bytes32,string,address,uint32,uint64)": FunctionFragment;
    "setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getData"
      | "ins"
      | "setSubnodeOwner"
      | "setSubnodeRecord"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSubnodeOwner",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeRecord",
    data: BytesLike
  ): Result;

  events: {};
}

export interface INameWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INameWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    ins(overrides?: CallOverrides): Promise<[string]>;

    setSubnodeOwner(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      ttl: PromiseOrValue<BigNumberish>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getData(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number, BigNumber]>;

  ins(overrides?: CallOverrides): Promise<string>;

  setSubnodeOwner(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    fuses: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSubnodeRecord(
    node: PromiseOrValue<BytesLike>,
    label: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    resolver: PromiseOrValue<string>,
    ttl: PromiseOrValue<BigNumberish>,
    fuses: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    ins(overrides?: CallOverrides): Promise<string>;

    setSubnodeOwner(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      ttl: PromiseOrValue<BigNumberish>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ins(overrides?: CallOverrides): Promise<BigNumber>;

    setSubnodeOwner(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      ttl: PromiseOrValue<BigNumberish>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getData(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSubnodeOwner(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSubnodeRecord(
      node: PromiseOrValue<BytesLike>,
      label: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      resolver: PromiseOrValue<string>,
      ttl: PromiseOrValue<BigNumberish>,
      fuses: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
