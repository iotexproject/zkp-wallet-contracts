{
  "address": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x598a7c77382fd129f5928e12fe75ccddf3ac171c3ce287e443156bd3b145df96",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x43cA9bAe8dF108684E5EAaA720C25e1b32B0A075",
    "transactionIndex": 0,
    "gasUsed": "1158339",
    "logsBloom": "0x
    "blockHash": "0x64a68c45ff103a06c64150bafa2fa3c383a4b02847dedab3c71a639ab7a08310",
    "transactionHash": "0x598a7c77382fd129f5928e12fe75ccddf3ac171c3ce287e443156bd3b145df96",
    "logs": [],
    "blockNumber": 20902604,
    "cumulativeGasUsed": "1158339",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab96e8224814cb821b670409e27b10e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/verifier.sol\":\"Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"src/verifier.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return\\n            G2Point(\\n                [\\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\\n                ],\\n                [\\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\\n                ]\\n            );\\n\\n        /*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length, \\\"pairing-lengths-failed\\\");\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\\ncontract Verifier {\\n    using Pairing for *;\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            4834375481965845846045146869066196156133919567818086309247980148652770934492,\\n            4556022390178302189859833889533688288087619650074082050913692736461615312834\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                14539764510163013014047476306243078734685388980803987169228735452407052814559,\\n                3183143784073031726257598968604320808936293151306570280991766461718989531893\\n            ],\\n            [\\n                1563232041357364880379760217989217063642517736641819547472987606828688176535,\\n                17215448593453279751710012730120188380443602725998818176128809727641563536452\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\\n            ],\\n            [\\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                492056710449489073537723198770473665532066561037054480225188009800074981548,\\n                18724275987196333201181264654435111666430358152730512493672138073327488065758\\n            ],\\n            [\\n                13024524026594190165692534936426609413359184400850892675798734527158749569260,\\n                1749670611283227666522802534221901440553651158372184083735522719428400519640\\n            ]\\n        );\\n        vk.IC = new Pairing.G1Point[](5);\\n\\n        vk.IC[0] = Pairing.G1Point(\\n            7168039636004173101163631272004953430898507129337516515349886198117780680013,\\n            19058226240003928378507645976237881119971442750628799536815812960600827307090\\n        );\\n\\n        vk.IC[1] = Pairing.G1Point(\\n            758934849231497522481647100387288731874976517983929972235033602760959325357,\\n            7330861193036801483904039994479514219331933434330408553821387660396814471359\\n        );\\n\\n        vk.IC[2] = Pairing.G1Point(\\n            13121073490875677933551412197054571998904951418738764146458459814013338516811,\\n            6291064716562417693343823421972218001185926428623675866135418397367258055395\\n        );\\n\\n        vk.IC[3] = Pairing.G1Point(\\n            11937040115459129598807443272053248305911720097018143486606035113056341388072,\\n            4524785835446010148589139701789243335937548252454144115066301143049354103288\\n        );\\n\\n        vk.IC[4] = Pairing.G1Point(\\n            12201384610928905111335569853976296205232755926613332695879032895440436268159,\\n            3867657958425551857553706403085954710379796476190575131974109418883260654890\\n        );\\n    }\\n\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length, \\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field, \\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (\\n            !Pairing.pairingProd4(\\n                Pairing.negate(proof.A),\\n                proof.B,\\n                vk.alfa1,\\n                vk.beta2,\\n                vk_x,\\n                vk.gamma2,\\n                proof.C,\\n                vk.delta2\\n            )\\n        ) return 1;\\n        return 0;\\n    }\\n\\n    /// @return r  bool true if proof is valid\\n    function verifyProof(\\n        uint[2] memory a,\\n        uint[2][2] memory b,\\n        uint[2] memory c,\\n        uint[4] memory input\\n    ) public view returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint[] memory inputValues = new uint[](input.length);\\n        for (uint i = 0; i < input.length; i++) {\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6c292ec719381b36151c7948c598d0787ebb6a5d4e9e18c673109e7b92b095b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[4])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}