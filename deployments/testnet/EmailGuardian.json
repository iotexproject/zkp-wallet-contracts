{
  "address": "0x1c118f2773ad68875ae83FE36B3b5469a264577a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDkimVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typ",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "target",
          "type": "bytes"
        }
      ],
      "name": "subjectHex",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "server",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "email",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "target",
          "type": "bytes"
        }
      ],
      "name": "validateDKIM",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x722d564a12cfe5a971ed8090709395cd1f8f339158adf8bcf4eec80390aac64f",
  "receipt": {
    "to": null,
    "from": "0x7c029553644F5E9442cb576c1056e0f7663Db1Fa",
    "contractAddress": "0x1c118f2773ad68875ae83FE36B3b5469a264577a",
    "transactionIndex": 0,
    "gasUsed": "1405091",
    "logsBloom": "0x
    "blockHash": "0x1db43533d76be4e248d7f071c87614d9a19cc02320ef6d3e3b748ea9e93e6e13",
    "transactionHash": "0x722d564a12cfe5a971ed8090709395cd1f8f339158adf8bcf4eec80390aac64f",
    "logs": [],
    "blockNumber": 21298298,
    "cumulativeGasUsed": "1405091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf08e18e012ca32aaBD0a112ef6BB21381A9a2756"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a12a0583223bea9c88f6737d4394d9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDkimVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typ\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"target\",\"type\":\"bytes\"}],\"name\":\"subjectHex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"server\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"target\",\"type\":\"bytes\"}],\"name\":\"validateDKIM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/EmailGuardian.sol\":\"EmailGuardian\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/EmailGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IDkimVerifier.sol\\\";\\nimport \\\"./interfaces/IEmailGuardian.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract EmailGuardian is IEmailGuardian {\\n    mapping(bytes32 => bool) public nullifierHashes;\\n\\n    IDkimVerifier private _dkimVerifier;\\n\\n    constructor(IDkimVerifier verifier) {\\n        _dkimVerifier = verifier;\\n    }\\n\\n    function validateDKIM(\\n        bytes32 server,\\n        bytes32 email,\\n        address account,\\n        bytes calldata data,\\n        bytes calldata signature,\\n        bytes calldata target\\n    ) external override returns (bool) {\\n        bytes32 hash = keccak256(data);\\n        require(!nullifierHashes[hash], \\\"used email data\\\");\\n        bytes memory from = _dkimVerifier.from(data);\\n        require(email == keccak256(from), \\\"error email owner\\\");\\n        require(_dkimVerifier.verify(server, data, signature), \\\"error dkim signature\\\");\\n        bytes memory subject = _dkimVerifier.subject(data);\\n        require(keccak256(subject) == keccak256(subjectHex(\\\"01\\\", account, target)), \\\"error email type or target\\\");\\n\\n        nullifierHashes[hash] = true;\\n        return true;\\n    }\\n\\n    // format: type + chainid + account_address + target\\n    function subjectHex(string memory typ, address account, bytes memory target) public view returns (bytes memory) {\\n        bytes memory converted = new bytes(target.length * 2);\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < target.length; i++) {\\n            converted[i * 2] = _base[uint8(target[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(target[i]) % _base.length];\\n        }\\n\\n        return abi.encodePacked(typ, Strings.toString(block.chainid), Strings.toHexString(account), converted);\\n    }\\n}\\n\",\"keccak256\":\"0x8fe8e8820089db02070acc94661617a76ec15d4d4cb1f9171c6e39205e4bce11\",\"license\":\"MIT\"},\"src/interfaces/IDkimVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IDkimVerifier {\\n    function from(bytes memory data) external view returns (bytes memory);\\n\\n    function subject(bytes memory data) external view returns (bytes memory);\\n\\n    function hash(bytes memory data) external view returns (bytes32);\\n\\n    function verify(bytes32 server, bytes calldata data, bytes calldata signature) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6bb3e51f51b89844a5b986045539dd9c87dc667c68ac5d1e3e557bd6631ed6fe\",\"license\":\"MIT\"},\"src/interfaces/IEmailGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IEmailGuardian {\\n    function validateDKIM(\\n        bytes32 server,\\n        bytes32 email,\\n        address account,\\n        bytes calldata data,\\n        bytes calldata signature,\\n        bytes calldata target\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x59778623280bd636d7b9487547f1bb5ef782d354506ba1d81a4cfc35f055fa8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161123438038061123483398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6111a1806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630ae362d71461004657806317cc915c1461006e5780631fe8c6b614610091575b600080fd5b610059610054366004610c0a565b6100b1565b60405190151581526020015b60405180910390f35b61005961007c366004610cca565b60006020819052908152604090205460ff1681565b6100a461009f366004610da9565b61053c565b6040516100659190610e6c565b60008087876040516100c4929190610e9f565b604080519182900390912060008181526020819052919091205490915060ff1615610150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7573656420656d61696c2064617461000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f391c87c800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063391c87c8906101a9908c908c90600401610eda565b600060405180830381865afa1580156101c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ee9190810190610ef6565b905080805190602001208b14610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6572726f7220656d61696c206f776e65720000000000000000000000000000006044820152606401610147565b6001546040517f5bf48e3a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635bf48e3a906102be908f908d908d908d908d90600401610f6d565b602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610fa6565b610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f7220646b696d207369676e61747572650000000000000000000000006044820152606401610147565b6001546040517fa3364fd900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063a3364fd9906103be908d908d90600401610eda565b600060405180830381865afa1580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104039190810190610ef6565b905061047b6040518060400160405280600281526020017f30310000000000000000000000000000000000000000000000000000000000008152508c88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053c92505050565b805190602001208180519060200120146104f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6572726f7220656d61696c2074797065206f72207461726765740000000000006044820152606401610147565b5050600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590509998505050505050505050565b606060008251600261054e9190610ff7565b67ffffffffffffffff81111561056657610566610ce3565b6040519080825280601f01601f191660200182016040528015610590576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b8451811015610743578182518683815181106105e9576105e961100e565b01602001516105fb919060f81c61106c565b8151811061060b5761060b61100e565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361063e836002610ff7565b8151811061064e5761064e61100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683815181106106925761069261100e565b01602001516106a4919060f81c611080565b815181106106b4576106b461100e565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836106e7836002610ff7565b6106f2906001611094565b815181106107025761070261100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061073b816110a7565b9150506105cb565b508561074e46610785565b61075787610843565b8460405160200161076b94939291906110df565b604051602081830303815290604052925050509392505050565b606060006107928361086c565b600101905060008167ffffffffffffffff8111156107b2576107b2610ce3565b6040519080825280601f01601f1916602001820160405280156107dc576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846107e657509392505050565b606061086673ffffffffffffffffffffffffffffffffffffffff8316601461094e565b92915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106108b5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106108e1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106108ff57662386f26fc10000830492506010015b6305f5e1008310610917576305f5e100830492506008015b612710831061092b57612710830492506004015b6064831061093d576064830492506002015b600a83106108665760010192915050565b6060600061095d836002610ff7565b610968906002611094565b67ffffffffffffffff81111561098057610980610ce3565b6040519080825280601f01601f1916602001820160405280156109aa576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106109e1576109e161100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610a4457610a4461100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610a80846002610ff7565b610a8b906001611094565b90505b6001811115610b28577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610acc57610acc61100e565b1a60f81b828281518110610ae257610ae261100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610b2181611136565b9050610a8e565b508315610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610147565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bbc57600080fd5b919050565b60008083601f840112610bd357600080fd5b50813567ffffffffffffffff811115610beb57600080fd5b602083019150836020828501011115610c0357600080fd5b9250929050565b600080600080600080600080600060c08a8c031215610c2857600080fd5b8935985060208a01359750610c3f60408b01610b98565b965060608a013567ffffffffffffffff80821115610c5c57600080fd5b610c688d838e01610bc1565b909850965060808c0135915080821115610c8157600080fd5b610c8d8d838e01610bc1565b909650945060a08c0135915080821115610ca657600080fd5b50610cb38c828d01610bc1565b915080935050809150509295985092959850929598565b600060208284031215610cdc57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d3b57610d3b610ce3565b604052919050565b600067ffffffffffffffff821115610d5d57610d5d610ce3565b50601f01601f191660200190565b6000610d7e610d7984610d43565b610d12565b9050828152838383011115610d9257600080fd5b828260208301376000602084830101529392505050565b600080600060608486031215610dbe57600080fd5b833567ffffffffffffffff80821115610dd657600080fd5b818601915086601f830112610dea57600080fd5b610df987833560208501610d6b565b9450610e0760208701610b98565b93506040860135915080821115610e1d57600080fd5b508401601f81018613610e2f57600080fd5b610e3e86823560208401610d6b565b9150509250925092565b60005b83811015610e63578181015183820152602001610e4b565b50506000910152565b6020815260008251806020840152610e8b816040850160208701610e48565b601f01601f19169190910160400192915050565b8183823760009101908152919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b602081526000610eee602083018486610eaf565b949350505050565b600060208284031215610f0857600080fd5b815167ffffffffffffffff811115610f1f57600080fd5b8201601f81018413610f3057600080fd5b8051610f3e610d7982610d43565b818152856020838501011115610f5357600080fd5b610f64826020830160208601610e48565b95945050505050565b858152606060208201526000610f87606083018688610eaf565b8281036040840152610f9a818587610eaf565b98975050505050505050565b600060208284031215610fb857600080fd5b81518015158114610b9157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761086657610866610fc8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261107b5761107b61103d565b500490565b60008261108f5761108f61103d565b500690565b8082018082111561086657610866610fc8565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110d8576110d8610fc8565b5060010190565b600085516110f1818460208a01610e48565b855190830190611105818360208a01610e48565b8551910190611118818360208901610e48565b845191019061112b818360208801610e48565b019695505050505050565b60008161114557611145610fc8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220fd37bfdf069827939e252e2a1491b4f9b06937fcb7e7c2be3cc134c93e3e736a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630ae362d71461004657806317cc915c1461006e5780631fe8c6b614610091575b600080fd5b610059610054366004610c0a565b6100b1565b60405190151581526020015b60405180910390f35b61005961007c366004610cca565b60006020819052908152604090205460ff1681565b6100a461009f366004610da9565b61053c565b6040516100659190610e6c565b60008087876040516100c4929190610e9f565b604080519182900390912060008181526020819052919091205490915060ff1615610150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7573656420656d61696c2064617461000000000000000000000000000000000060448201526064015b60405180910390fd5b6001546040517f391c87c800000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063391c87c8906101a9908c908c90600401610eda565b600060405180830381865afa1580156101c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101ee9190810190610ef6565b905080805190602001208b14610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6572726f7220656d61696c206f776e65720000000000000000000000000000006044820152606401610147565b6001546040517f5bf48e3a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690635bf48e3a906102be908f908d908d908d908d90600401610f6d565b602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610fa6565b610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f7220646b696d207369676e61747572650000000000000000000000006044820152606401610147565b6001546040517fa3364fd900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063a3364fd9906103be908d908d90600401610eda565b600060405180830381865afa1580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104039190810190610ef6565b905061047b6040518060400160405280600281526020017f30310000000000000000000000000000000000000000000000000000000000008152508c88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053c92505050565b805190602001208180519060200120146104f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6572726f7220656d61696c2074797065206f72207461726765740000000000006044820152606401610147565b5050600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590509998505050505050505050565b606060008251600261054e9190610ff7565b67ffffffffffffffff81111561056657610566610ce3565b6040519080825280601f01601f191660200182016040528015610590576020820181803683370190505b5060408051808201909152601081527f3031323334353637383961626364656600000000000000000000000000000000602082015290915060005b8451811015610743578182518683815181106105e9576105e961100e565b01602001516105fb919060f81c61106c565b8151811061060b5761060b61100e565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168361063e836002610ff7565b8151811061064e5761064e61100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508182518683815181106106925761069261100e565b01602001516106a4919060f81c611080565b815181106106b4576106b461100e565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016836106e7836002610ff7565b6106f2906001611094565b815181106107025761070261100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061073b816110a7565b9150506105cb565b508561074e46610785565b61075787610843565b8460405160200161076b94939291906110df565b604051602081830303815290604052925050509392505050565b606060006107928361086c565b600101905060008167ffffffffffffffff8111156107b2576107b2610ce3565b6040519080825280601f01601f1916602001820160405280156107dc576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846107e657509392505050565b606061086673ffffffffffffffffffffffffffffffffffffffff8316601461094e565b92915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106108b5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106108e1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106108ff57662386f26fc10000830492506010015b6305f5e1008310610917576305f5e100830492506008015b612710831061092b57612710830492506004015b6064831061093d576064830492506002015b600a83106108665760010192915050565b6060600061095d836002610ff7565b610968906002611094565b67ffffffffffffffff81111561098057610980610ce3565b6040519080825280601f01601f1916602001820160405280156109aa576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106109e1576109e161100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610a4457610a4461100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000610a80846002610ff7565b610a8b906001611094565b90505b6001811115610b28577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610acc57610acc61100e565b1a60f81b828281518110610ae257610ae261100e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93610b2181611136565b9050610a8e565b508315610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610147565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bbc57600080fd5b919050565b60008083601f840112610bd357600080fd5b50813567ffffffffffffffff811115610beb57600080fd5b602083019150836020828501011115610c0357600080fd5b9250929050565b600080600080600080600080600060c08a8c031215610c2857600080fd5b8935985060208a01359750610c3f60408b01610b98565b965060608a013567ffffffffffffffff80821115610c5c57600080fd5b610c688d838e01610bc1565b909850965060808c0135915080821115610c8157600080fd5b610c8d8d838e01610bc1565b909650945060a08c0135915080821115610ca657600080fd5b50610cb38c828d01610bc1565b915080935050809150509295985092959850929598565b600060208284031215610cdc57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d3b57610d3b610ce3565b604052919050565b600067ffffffffffffffff821115610d5d57610d5d610ce3565b50601f01601f191660200190565b6000610d7e610d7984610d43565b610d12565b9050828152838383011115610d9257600080fd5b828260208301376000602084830101529392505050565b600080600060608486031215610dbe57600080fd5b833567ffffffffffffffff80821115610dd657600080fd5b818601915086601f830112610dea57600080fd5b610df987833560208501610d6b565b9450610e0760208701610b98565b93506040860135915080821115610e1d57600080fd5b508401601f81018613610e2f57600080fd5b610e3e86823560208401610d6b565b9150509250925092565b60005b83811015610e63578181015183820152602001610e4b565b50506000910152565b6020815260008251806020840152610e8b816040850160208701610e48565b601f01601f19169190910160400192915050565b8183823760009101908152919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b602081526000610eee602083018486610eaf565b949350505050565b600060208284031215610f0857600080fd5b815167ffffffffffffffff811115610f1f57600080fd5b8201601f81018413610f3057600080fd5b8051610f3e610d7982610d43565b818152856020838501011115610f5357600080fd5b610f64826020830160208601610e48565b95945050505050565b858152606060208201526000610f87606083018688610eaf565b8281036040840152610f9a818587610eaf565b98975050505050505050565b600060208284031215610fb857600080fd5b81518015158114610b9157600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761086657610866610fc8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261107b5761107b61103d565b500490565b60008261108f5761108f61103d565b500690565b8082018082111561086657610866610fc8565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110d8576110d8610fc8565b5060010190565b600085516110f1818460208a01610e48565b855190830190611105818360208a01610e48565b8551910190611118818360208901610e48565b845191019061112b818360208801610e48565b019695505050505050565b60008161114557611145610fc8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220fd37bfdf069827939e252e2a1491b4f9b06937fcb7e7c2be3cc134c93e3e736a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3756,
        "contract": "src/EmailGuardian.sol:EmailGuardian",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3759,
        "contract": "src/EmailGuardian.sol:EmailGuardian",
        "label": "_dkimVerifier",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDkimVerifier)4928"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDkimVerifier)4928": {
        "encoding": "inplace",
        "label": "contract IDkimVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}